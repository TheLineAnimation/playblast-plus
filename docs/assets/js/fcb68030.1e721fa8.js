"use strict";(self.webpackChunktla_docusaurus_base=self.webpackChunktla_docusaurus_base||[]).push([[447],{2778:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/downloader-da2e7f1b4c0c90138a35a3ba5f83cd7f.gif"},3878:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/pbp_structure-4636f4074928ae4a88d021aba2fc7ffb.png"},4373:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"user-guide/deploying","title":"Deploying Playblast Plus","description":"TD Information for pipeline deployment.","source":"@site/docs/user-guide/deploying.md","sourceDirName":"user-guide","slug":"/user-guide/deploying","permalink":"/playblast-plus/docs/user-guide/deploying","draft":false,"unlisted":false,"editUrl":"https://github.com/TheLineAnimation/playblast-plus/docs/user-guide/deploying.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Deploying Playblast Plus","description":"TD Information for pipeline deployment.","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Using Playblast Plus","permalink":"/playblast-plus/docs/user-guide/interface"},"next":{"title":"Special Thanks","permalink":"/playblast-plus/docs/credits"}}');var i=s(4848),l=s(8453);const o={title:"Deploying Playblast Plus",description:"TD Information for pipeline deployment.",sidebar_position:2},a="Deploying Playblast Plus",r={},d=[{value:"How it all works",id:"how-it-all-works",level:2},{value:"Setting up the Module Environment",id:"setting-up-the-module-environment",level:2},{value:"Launching the UI",id:"launching-the-ui",level:2},{value:"Setting up FFMPEG",id:"setting-up-ffmpeg",level:2},{value:"Understanding the config.json",id:"understanding-the-configjson",level:2},{value:"Adding this to a shelf in Maya",id:"adding-this-to-a-shelf-in-maya",level:2},{value:"Adding this to a menu or quad in 3ds Max",id:"adding-this-to-a-menu-or-quad-in-3ds-max",level:2},{value:"How does this work?",id:"how-does-this-work",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deploying-playblast-plus",children:"Deploying Playblast Plus"})}),"\n",(0,i.jsx)(n.p,{children:"Playblast Plus can run in two different ways:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Completely localised on an artist's workstation."}),"\n",(0,i.jsx)(n.li,{children:"From a network location to allow Pipeline TDs to specify versions and allow for easy updates in a studio setting."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"How the module is structured",src:s(3878).A+"",width:"1600",height:"1207"})}),"\n",(0,i.jsx)(n.p,{children:"This is because it only runs the core code from the library and offloads any transcoding to a local install of ffMpeg."}),"\n",(0,i.jsx)(n.h2,{id:"how-it-all-works",children:"How it all works"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Code base runs from a networked location, and offloads the transcoding to the local machine"}),"\n",(0,i.jsx)(n.li,{children:"playblasts/previews and captures reside on the artist's machine"}),"\n",(0,i.jsx)(n.li,{children:"This setup requires FFMPEG to be installed locally. The location isn't important and can be configured to multiple folders globally to allow different setups."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-the-module-environment",children:"Setting up the Module Environment"}),"\n",(0,i.jsx)(n.p,{children:"Playblast Plus requires the directory to be visible on the PYTHONPATH, and this can be set identically for multiple hosts."}),"\n",(0,i.jsx)(n.admonition,{title:"Important",type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Playblast Plus is Python 3 x only."}),(0,i.jsx)(n.br,{}),"\n","I decided that given the minimum DCC version used in future productions wouldn't be anything before the 2022 releases, it's too much to support older host versions."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"PYTHONPATH = {PLAYBLAST PLUS FOLDER}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Running from a networked drive is the preferred route for a Studio install, as the PYTHONPATH environment variable can be set via something like Active Directory, or within a pipeline loader like OpenPype/Ayon.",(0,i.jsx)(n.br,{}),"\n","You could keep the ",(0,i.jsx)(n.code,{children:"playblast plus"})," folder marked with the version release. This way, you would have a flexible way to update and test new versions, as you can point the python path at the specific version for each DCC version."]}),"\n",(0,i.jsx)(n.h2,{id:"launching-the-ui",children:"Launching the UI"}),"\n",(0,i.jsx)(n.p,{children:"This should be an identical call regardless of host. Playblast Plus is executed via a launch.py script, which detects the host executable and imports the relevant DCC-centric modules."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from playblast_plus import launch\nlaunch.run()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-ffmpeg",children:"Setting up FFMPEG"}),"\n",(0,i.jsx)(n.p,{children:"Playblast Plus uses FFMPEG to transcode the preview image sequences into a H264 encoded MP4. It does this seamlessly after the preview stage, but you need to have the executable located somewhere on your local system."}),"\n",(0,i.jsx)(n.p,{children:"I don't bundle the executable with the code base for a number of reasons, but the main one is so that the encoding step is offloaded to the local machine, while the main codebase can be run from a network. Whilst Playblast Plus will work fine when installed locally, running from a network means the studio template default is applied across the board, and any changes to this will be adopted studio-wide automatically."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The downloader interface",src:s(2778).A+"",width:"380",height:"303"})}),"\n",(0,i.jsxs)(n.p,{children:["Playblast Plus will search any locations that are present in the ",(0,i.jsx)(n.code,{children:"config.json"})," and look for ",(0,i.jsx)(n.code,{children:"ffMpeg.exe"}),". If it doesn't find any, it will present you with a downloader to do this."]}),"\n",(0,i.jsxs)(n.p,{children:["This will download the ffMpeg version specified in the config key ",(0,i.jsx)(n.code,{children:"ffmpeg:download_url"})," to the current user directory. Simply unpack the zip and drop ffMpeg.exe into one of the locations shown, or install to a folder of your choice and update ",(0,i.jsx)(n.code,{children:"config.json"})," to include this path."]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,i.jsxs)(n.p,{children:["If you don't alter the first entry of the ",(0,i.jsx)(n.code,{children:"executable_paths"})," entry, it will resolve a relative folder called ",(0,i.jsx)(n.strong,{children:"/bin"})," in the current script environment."]})}),"\n",(0,i.jsx)(n.p,{children:"I don't unpack and move this automatically, I decided it's ok for someone to decide where they run this from. I have specific deployment locations for FFMpeg on the network so that I can launch this in a pipeline context. But it works completely fine locally too."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-configjson",children:"Understanding the config.json"}),"\n",(0,i.jsxs)(n.p,{children:["Playblast Plus will take core settings from the ",(0,i.jsx)(n.code,{children:"config.json"})," located in the root folder of the module. This contains data that informs the main operation of the module."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "studio_templates": "./templates/studio",\n    "project_template_subpath": "tools/pipeline/playblast/templates",\n    "documentation_url":"https://thelineanimation.com",\n    "overrides": {\n        "wireframe_color": [0.1,0.1,0.1]\n    },\n    "default_output_token": "<scene>_<user>",\n    "ffmpeg": {\n        "download_url":"https://github.com/GyanD/codexffmpeg/releases/download/5.1.2/ffmpeg-5.1.2-essentials_build.zip",\n        "executable_paths": [\n            "./bin",\n            "C:/Program Files/ffmpeg/bin"\n        ],\n        "input_args": "-c:v libx264 -crf 21 -preset ultrafast -pix_fmt yuv420p",\n        "output_args": "",\n        "burnin": {\n            "enabled":true,\n            "prefix_text": ""\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"adding-this-to-a-shelf-in-maya",children:"Adding this to a shelf in Maya"}),"\n",(0,i.jsx)(n.p,{children:"To add Playblast Plus to a Maya shelf:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Open Maya."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Open the Script Editor."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In a ",(0,i.jsx)(n.strong,{children:"Python"})," tab, paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import playblast_plus.launch\nplayblast_plus.launch.run()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Select the code and ",(0,i.jsx)(n.strong,{children:"middle-mouse drag"})," it onto your desired shelf."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Right-click the new shelf button, choose ",(0,i.jsx)(n.strong,{children:"Edit"}),", and set the icon and label as desired."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now, clicking the shelf button will launch Playblast Plus."}),"\n",(0,i.jsx)(n.h2,{id:"adding-this-to-a-menu-or-quad-in-3ds-max",children:"Adding this to a menu or quad in 3ds Max"}),"\n",(0,i.jsx)(n.p,{children:"To quickly launch Playblast Plus from a menu or quad in 3ds Max, you can create a custom Macroscript:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Open 3ds Max."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Go to the ",(0,i.jsx)(n.strong,{children:"Scripting"})," menu and choose ",(0,i.jsx)(n.strong,{children:"New Script"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Paste the following code into the MaxScript editor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-maxscript",children:'macroScript PreviewPlus\ncategory:"PreviewPlus"\ntoolTip:"Launch the Preview Plus Interface"\n(\n    python.Execute "import playblast_plus.launch"\n    python.Execute "playblast_plus.launch.run()"\n)\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.strong,{children:"Ctrl+E"})," or use the ",(0,i.jsx)(n.strong,{children:"Evaluate All"})," button to run the script and register the Macroscript."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the ",(0,i.jsx)(n.strong,{children:"Customize User Interface"})," dialog (Customize > Customize User Interface)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Under the ",(0,i.jsx)(n.strong,{children:"Category"})," dropdown, find and select ",(0,i.jsx)(n.strong,{children:"PreviewPlus"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Drag the ",(0,i.jsx)(n.strong,{children:"PreviewPlus"})," action to a toolbar, menu, or quad menu of your choice."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now, you can launch Playblast Plus directly from your chosen location in 3ds Max with a single click."}),"\n",(0,i.jsxs)(n.p,{children:["If you\u2019re unfamiliar with adding Macroscripts to menus or quads in 3ds Max, see ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=kvaAY8TCRdo",children:"this video tutorial"})," for step-by-step instructions. Thanks to ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/@MiledRizk",children:"MiledRizk"})," for this step-by-step guide."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"running-playblast-plus-inside-different-hosts",children:"Running Playblast Plus Inside Different Hosts"}),"\n",(0,i.jsx)(n.p,{children:"The codebase of Playblast Plus has been engineered to be as flexible as possible across different packages."}),"\n",(0,i.jsx)(n.h2,{id:"how-does-this-work",children:"How does this work?"}),"\n",(0,i.jsx)(n.p,{children:"If you have coded in a DCC before, the way python is implemented is different for each. Standard python library operations all function the same, like folder operations. But when it comes to calling specific functions like create preview in 3ds Max and Playblast in Maya, the imports and methods are completely different."}),"\n",(0,i.jsx)(n.p,{children:"Playblast Plus does this as we can assign functions and classes to other variables. The glue for all this is the DCC module. This module contains the HOST class that is called when the script is run."}),"\n",(0,i.jsxs)(n.p,{children:["There are two other classes that contain a set of common methods that HOST can call. These are ",(0,i.jsx)(n.code,{children:"SCENE"})," and ",(0,i.jsx)(n.code,{children:"PREVIEW"}),". Each host subclasses these and overrides the methods contained, so whilst the imports are specific to the host, there is a common interface between them."]}),"\n",(0,i.jsxs)(n.p,{children:["So the Maya host will subclass SCENE as ",(0,i.jsx)(n.code,{children:"MAYA_SCENE"}),", and 3dsMax will also subclass SCENE as ",(0,i.jsx)(n.code,{children:"MAX_SCENE"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The HOST class determines what DCC has called it and assigns the correct subclass to the methods called by the user interface."}),"\n",(0,i.jsxs)(n.p,{children:["So in 3dsMax, ",(0,i.jsx)(n.code,{children:"Host.scene.getCamera()"})," will be calling ",(0,i.jsx)(n.code,{children:"Max_scene.getCameras()"}),", and in Maya the same call will result in ",(0,i.jsx)(n.code,{children:"maya_scene.getCameras()"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},l=t.createContext(i);function o(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);